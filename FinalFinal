Sub ParseTextFileForSecurities()
    Dim FilePath As String
    Dim FolderPath As String
    Dim TextLine As String
    Dim Securities As Variant
    Dim CurrentSecurity As Variant
    Dim FileNum As Integer
    Dim Lines() As String
    Dim Pos As Integer
    Dim AdmissionsValue As Double
    Dim WithdrawalsValue As Double
    Dim SecurityInfo As String
    Dim col As Integer
    Dim sumUp As Double
    Dim Found As Boolean

    Dim unitPrice As String
    Dim finalUnits As Variant
    Dim finalPrice As Variant
    Dim sumUnits As Variant
    Dim sumPrice As Variant

    Dim i As Integer
    Dim Keyword As String
    Dim Position As Long
    Dim Units As Variant
    Dim price As Variant
    Dim TextAfterKeyword As String
    Dim Values() As String
    Keyword = "approved open order"

    Dim vb As Double, vc As Double, vd As Double, ve As Double
    Dim row10 As Integer

    close

    ' List of securities (S1, S2, S3, S4) - Correspond to columns B, C, D, E
    Securities = Array("S1", "S2", "S3", "S4")

    ' Set the folder path where the file is located
    FolderPath = "C:\path\to\your\folder"
    
    ' Change the current directory to the specified folder
    On Error Resume Next ' If the folder does not exist, handle the error
    ChDir FolderPath
    On Error GoTo 0 ' Re-enable normal error handling
    
    ' Set the folder path where the file is located
    FilePath = Application.GetOpenFilename("Text Files (*.txt), All Files (*.*), *.*", , "Select a File")

    ' Check if the user canceled
    If FilePath = "False" Then
        MsgBox "No file was selected.", vbExclamation
        Exit Sub
    End If 

    ' Open the text file for reading
    FileNum = FreeFile
    Open FilePath For Input As FileNum
    
    ' Read all lines from the file into an array
    TextLine = Input$(LOF(FileNum), FileNum)
    Lines = Split(TextLine, vbCrLf)
    
    ' Close the file after reading
    Close FileNum

    ' Loop through each line using a For loop
    For i = LBound(Lines) To UBound(Lines)
        TextLine = Lines(i)
        
        ' Loop through the securities to check if the current line contains one of them
        For Each CurrentSecurity In Securities
            If InStr(TextLine, CurrentSecurity) > 0 Then
                Debug.Print "Currently on security: " & CurrentSecurity ' Prints to Immediate Window
                Exit For
            End If
        Next CurrentSecurity

        ' changing security info variable
        if CurrentSecuity <> "" then
                SecurityInfo = ""
                SecurityInfo = CurrentSecurity
        End if

        ' Loop through each line in the file for open orders
        If SecurityInfo <> "" Then 

            FileNum = FreeFile
            Open FilePath For input As FileNum



            
            ' Check for the current security
            If InStr(TextLine, CurrentSecurity) > 0 Then
                ' Check for units and price
                Dim Units As Double
                Dim Price As Double
                
                ' Example extraction logic (you can replace this with your actual logic)
                If InStr(TextLine, "approved open order") > 0 Then
                    Dim Values() As String
                    Values = Split(Application.Trim(TextLine), " ")
                    
                    If IsNumeric(Values(0)) Then
                        Units = CDbl(Values(0))
                        If UBound(Values) > 0 And IsNumeric(Values(1)) Then
                            Price = CDbl(Values(1))
                            finalUnits = finalUnits + Units
                            finalPrice = finalPrice + Price
                        End If
                    End If
                End If
            End If
        Loop
        
        ' Close the file
        Close FileNum

        ' Calculate unit price
        If finalUnits <> 0 Then
            unitPrice = finalPrice & " / " & finalUnits
        End If

        ' Store the unit price in row 9 for the current security
        Cells(9, Application.Match(CurrentSecurity, Securities, 0) + 1).Value = unitPrice
    Next CurrentSecurity

    ' Reopen the text file to check for Admissions and Withdrawals
    FileNum = FreeFile
    Open FilePath For Input As FileNum

    ' Loop through each line for admissions and withdrawals
    Do Until EOF(FileNum)
        Line Input #FileNum, TextLine

        For Each CurrentSecurity In Securities
            If InStr(TextLine, CurrentSecurity) > 0 Then
                ' Check for "TOTAL ADMISSIONS:"
                If InStr(TextLine, "TOTAL ADMISSIONS:") > 0 Then
                    Pos = InStr(TextLine, "TOTAL ADMISSIONS:")
                    ' Extract the second number after the keyword
                    AdmissionsValue = GetSecondNumber(TextLine, Pos + Len("TOTAL ADMISSIONS:"))
                    Debug.Print "Admissions for " & CurrentSecurity & ": " & AdmissionsValue
                    
                    ' Based on CurrentSecurity, import into the appropriate column
                    If CurrentSecurity = "S1" Then
                        Cells(7, 2).Value = -(AdmissionsValue) ' Column B, Row 7
                    ElseIf CurrentSecurity = "S2" Then
                        Cells(7, 3).Value = -(AdmissionsValue) ' Column C, Row 7
                    ElseIf CurrentSecurity = "S3" Then
                        Cells(7, 4).Value = -(AdmissionsValue) ' Column D, Row 7
                    ElseIf CurrentSecurity = "S4" Then
                        Cells(7, 5).Value = -(AdmissionsValue) ' Column E, Row 7
                    End If
                End If
                
                ' Check for "TOTAL WITHDRAWALS:"
                If InStr(TextLine, "TOTAL WITHDRAWALS:") > 0 Then
                    Pos = InStr(TextLine, "TOTAL WITHDRAWALS:")
                    ' Extract the second number after the keyword
                    WithdrawalsValue = GetSecondNumber(TextLine, Pos + Len("TOTAL WITHDRAWALS:"))
                    Debug.Print "Withdrawals for " & CurrentSecurity & ": " & WithdrawalsValue
                    
                    ' Based on CurrentSecurity, import into the appropriate column
                    If CurrentSecurity = "S1" Then
                        Cells(8, 2).Value = -(WithdrawalsValue) ' Column B, Row 8
                    ElseIf CurrentSecurity = "S2" Then
                        Cells(8, 3).Value = -(WithdrawalsValue) ' Column C, Row 8
                    ElseIf CurrentSecurity = "S3" Then
                        Cells(8, 4).Value = -(WithdrawalsValue) ' Column D, Row 8
                    ElseIf CurrentSecurity = "S4" Then
                        Cells(8, 5).Value = -(WithdrawalsValue) ' Column E, Row 8
                    End If
                End If
            End If
        Next CurrentSecurity
    Loop

    ' Close the file
    Close FileNum

    ' Fill empty cells in rows 7 and 8 with 0
    For col = 2 To 5
        If IsEmpty(Cells(7, col)) Then Cells(7, col).Value = 0
        If IsEmpty(Cells(8, col)) Then Cells(8, col).Value = 0
    Next col
    
    ' Loop through columns B to E (2 to 5)
    For row10 = 2 To 5
        Select Case row10
            Case 2 ' Column B
                Cells(10, row10).Formula = "=SUM(" & Cells(7, row10).Address & ":" & Cells(8, row10).Address & ") - " & vb
            Case 3 ' Column C
                Cells(10, row10).Formula = "=SUM(" & Cells(7, row10).Address & ":" & Cells(8, row10).Address & ") - " & vc
            Case 4 ' Column D
                Cells(10, row10).Formula = "=SUM(" & Cells(7, row10).Address & ":" & Cells(8, row10).Address & ") - " & vd
            Case 5 ' Column E
                Cells(10, row10).Formula = "=SUM(" & Cells(7, row10).Address & ":" & Cells(8, row10).Address & ") - " & ve
        End Select
    Next row10

    ' Check for "unapproved" in the file
    FileNum = FreeFile
    Open FilePath For Input As FileNum
    Found = False

    ' Loop through each line in the text file
    Do While Not EOF(FileNum)
        Line Input #FileNum, TextLine
        If InStr(1, TextLine, "unapproved", vbTextCompare) > 0 Then
            Found = True
            Exit Do
        End If
    Loop

    ' Close the file
    Close FileNum

    ' Message box based on whether "unapproved" was found or not
    If Found Then
        MsgBox "The word 'unapproved' was found in the text file.", vbInformation
    Else
        MsgBox "The word 'unapproved' was not found in the text file.", vbInformation
    End If
End Sub

' Helper function to extract the second number from the text line
Function GetSecondNumber(ByVal TextLine As String, ByVal StartPos As Integer) As String
    Dim Parts As Variant
    Dim i As Integer
    Dim Counter As Integer

    Parts = Split(Mid(TextLine, StartPos))
    Counter = 0

    ' Loop through the parts and return the second number found
    For i = LBound(Parts) To UBound(Parts)
        If IsNumeric(Parts(i)) Then
            Counter = Counter + 1
            If Counter = 2 Then
                GetSecondNumber = Parts(i)
                Exit Function
            End If
        End If
    Next i

    GetSecondNumber = "" ' Return empty string if no second number found
End Function
