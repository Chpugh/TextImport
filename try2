Sub ParseSecurityData()
    Dim TextFile As String
    Dim FilePath As String
    Dim FileContent As String
    Dim SecurityIDs As Variant
    Dim CurrentSecurity As String
    Dim AdmissionsFound As Boolean, WithdrawalsFound As Boolean
    Dim AdmissionsValue As Double, WithdrawalsValue As Double
    Dim SecurityRow As Integer
    Dim i As Integer, Line As Variant
    
    ' Set the path to your text file
    FilePath = "C:\path_to_your_file\yourfile.txt"
    
    ' Read the text file into a string variable
    TextFile = FreeFile
    Open FilePath For Input As TextFile
    FileContent = Input$(LOF(TextFile), TextFile)
    Close TextFile
    
    ' Split the content into lines
    Lines = Split(FileContent, vbCrLf)
    
    ' Define your security IDs (B5, C5, D5, E5)
    SecurityIDs = Array(Range("B5").Value, Range("C5").Value, Range("D5").Value, Range("E5").Value)
    
    ' Loop through the text file line by line
    For i = LBound(SecurityIDs) To UBound(SecurityIDs)
        CurrentSecurity = SecurityIDs(i)
        AdmissionsFound = False
        WithdrawalsFound = False
        
        ' Loop through each line to find the current security
        For Each Line In Lines
            If InStr(Line, CurrentSecurity) > 0 Then
                ' Found the security, now look for TOTAL ADMISSIONS and TOTAL WITHDRAWALS under this security
                Do While Not (AdmissionsFound And WithdrawalsFound)
                    i = i + 1 ' Move to the next line
                    
                    ' Check for TOTAL ADMISSIONS:
                    If InStr(Lines(i), "TOTAL ADMISSIONS:") > 0 Then
                        AdmissionsValue = ParseSecondNumber(Lines(i))
                        AdmissionsFound = True
                        Cells(7, 2 + i).Value = AdmissionsValue ' Row 7 for Admissions
                    End If
                    
                    ' Check for TOTAL WITHDRAWALS:
                    If InStr(Lines(i), "TOTAL WITHDRAWALS:") > 0 Then
                        WithdrawalsValue = ParseSecondNumber(Lines(i))
                        WithdrawalsFound = True
                        Cells(8, 2 + i).Value = WithdrawalsValue ' Row 8 for Withdrawals
                    End If
                    
                    ' Stop if both keywords have been found
                    If AdmissionsFound And WithdrawalsFound Then Exit Do
                Loop
            End If
        Next Line
    Next i
End Sub

' Helper function to parse and return the second number in a line
Function ParseSecondNumber(Line As String) As Double
    Dim Words As Variant
    Words = Split(Line, " ")
    
    ' Skip the first number and return the second one after the keyword
    ParseSecondNumber = CDbl(Words(UBound(Words) - 1)) ' Adjust index as needed if format varies
End Function