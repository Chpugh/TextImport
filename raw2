Sub ParseTextFileForSecurities()
    Dim FilePath As String
    Dim TextLine As String
    Dim Securities As Variant
    Dim CurrentSecurity As String
    Dim FileNum As Integer
    Dim i As Integer
    Dim Lines() As String
    Dim SecurityIndex As Integer
    Dim Pos As Integer
    Dim AdmissionsValue As String
    Dim WithdrawalsValue As String

    Dim SecurityInfo As string

    Dim col As Integer 'replaced  blank cells with 0
    Dim SumUp As Integer ' suming up admissions and withdrawals
    Dim Found As Boolean ' Checking Unapproved
    Dim FolderPath As String ' opening folder path
    
    ' List of securities (S1, S2, S3, S4) - Correspond to columns B, C, D, E
    Securities = Array("S1", "S2", "S3", "S4")
    
    ' Set the folder path where the file is located
    FolderPath = "C:\path\to\your\file.txt"

    ' Change the current directory to the specified folder
    On Error Resume Next ' If the folder does not exist, handle the error
    ChDir FolderPath
    On Error GoTo 0 ' Re-enable normal error handling
    FilePath = Application.GetOpenFilename("Text Files (*.txt), All Files (*.*), *.*", , "Select a File")

    ' Check if the user canceled (returns False if canceled)
    If FilePath <> "False" Then
        MsgBox "You selected: " & FilePath, vbInformation
        ' You can now use FilePath to open the file or perform other actions
    Else
        MsgBox "No file was selected.", vbExclamation
        Exit Sub
    End If 
    ' Open the text file for reading
    FileNum = FreeFile
    Open FilePath For Input As FileNum
    
    ' Read all lines from the file into an array
    TextLine = Input$(LOF(FileNum), FileNum)
    Lines = Split(TextLine, vbCrLf)
    
    ' Close the file after reading
    Close FileNum
    
    ' Initialize security index (-1 means no security found yet)
    SecurityIndex = -1
    foundOpenOrder = False = WHAT DOES THIS DO?
    
    ' Loop through each line using a For loop
    For i = LBound(Lines) To UBound(Lines)
        TextLine = Lines(i)
        
        ' Loop through the securities to check if the current line contains one of them
        For Each CurrentSecurity In Securities
            If InStr(TextLine, CurrentSecurity) > 0 Then
                Debug.Print "Currently on security: " & CurrentSecurity ' Prints to Immediate Window
                Exit For
            End If
        Next CurrentSecurity

				' changing security info variable
				if CurrentSecuity <> "" then
						SecurityInfo = ""
						SecurityInfo = CurrentSecurity
				End if
        
        ' Now, based on the found CurrentSecurity, process keywords for that security
        If CurrentSecurity <> "" Then
            ' Check for "TOTAL ADMISSIONS:"
            If InStr(TextLine, "TOTAL ADMISSIONS:") > 0 Then
                Pos = InStr(TextLine, "TOTAL ADMISSIONS:")
                ' Extract the second number after the keyword
                AdmissionsValue = GetSecondNumber(TextLine, Pos + Len("TOTAL ADMISSIONS:"))
                Debug.Print "Admissions for " & CurrentSecurity & ": " & AdmissionsValue
                
                ' Based on CurrentSecurity, import into the appropriate column
                If CurrentSecurity = "S1" Then
                    Cells(7, 2).Value = -(AdmissionsValue) ' Column B, Row 7
                ElseIf CurrentSecurity = "S2" Then
                    Cells(7, 3).Value = -(AdmissionsValue) ' Column C, Row 7
                ElseIf CurrentSecurity = "S3" Then
                    Cells(7, 4).Value = -(AdmissionsValue) ' Column D, Row 7
                ElseIf CurrentSecurity = "S4" Then
                    Cells(7, 5).Value = -(AdmissionsValue) ' Column E, Row 7
                End If
            End If
            
            ' Check for "TOTAL WITHDRAWALS:"
            If InStr(TextLine, "TOTAL WITHDRAWALS:") > 0 Then
                Pos = InStr(TextLine, "TOTAL WITHDRAWALS:")
                ' Extract the second number after the keyword
                WithdrawalsValue = GetSecondNumber(TextLine, Pos + Len("TOTAL WITHDRAWALS:"))
                Debug.Print "Withdrawals for " & CurrentSecurity & ": " & WithdrawalsValue
                
                ' Based on CurrentSecurity, import into the appropriate column
                If CurrentSecurity = "S1" Then
                    Cells(8, 2).Value = -(WithdrawalsValue) ' Column B, Row 8
                ElseIf CurrentSecurity = "S2" Then
                    Cells(8, 3).Value = -(WithdrawalsValue) ' Column C, Row 8
                ElseIf CurrentSecurity = "S3" Then
                    Cells(8, 4).Value = -(WithdrawalsValue) ' Column D, Row 8
                ElseIf CurrentSecurity = "S4" Then
                    Cells(8, 5).Value = -(WithdrawalsValue) ' Column E, Row 8
                End If
            End If
        End If
    Next i

For col = 2 To 5
    ' Check and fill row 7 (Admissions)
    If IsEmpty(Cells(7, col)) Then
        Cells(7, col).Value = 0
    End If
    
    ' Check and fill row 8 (Withdrawals)
    If IsEmpty(Cells(8, col)) Then
        Cells(8, col).Value = 0
    End If
Next col

End Sub

' Helper function to extract the second number from the text line
Function GetSecondNumber(ByVal TextLine As String, ByVal StartPos As Integer) As String
    Dim Parts As Variant
    Dim i As Integer
    Dim Counter As Integer
    
    ' Split the text line into parts (numbers and words)
    Parts = Split(Mid(TextLine, StartPos))
    Counter = 0
    
    ' Loop through the parts and return the second number found
    For i = LBound(Parts) To UBound(Parts)
        If IsNumeric(Parts(i)) Then
            Counter = Counter + 1
            If Counter = 2 Then
                GetSecondNumber = Parts(i)
                Exit Function
            End If
        End If
    Next i
    
    ' If no second number is found, return an empty string
    GetSecondNumber = ""
End Function
